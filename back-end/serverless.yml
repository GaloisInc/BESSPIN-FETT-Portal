service:
  name: fettportal
plugins:
  - serverless-pseudo-parameters
  - serverless-webpack
  - serverless-offline
package:
  individually: true
  exclude:
    - front-end/**
provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  stage: ${opt:stage, 'develop'}
  stackName: ${opt:stage}-${self:service.name}
  versionFunctions: false
  deploymentBucket: 
    name: ${file(config/config.${self:provider.stage}.json):deploymentBucket}
  tags:
    Project: FETT-Portal
    Environment: ${opt:stage}
    CreatedBy: Kurt Hopfer
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource: '*'
    - Effect: "Allow"
      Action:
        - "ssm:GetParametersByPath"
        - "ssm:GetParameter"
        - "ssm:GetParameters"
        - "ssm:PutParameter"
      Resource:
        - "arn:aws:ssm:us-west-2:#{AWS::AccountId}:parameter/fettportal/*"
        - "arn:aws:ssm:us-west-2:#{AWS::AccountId}:parameter/fettportal/*"
    - Effect: "Allow"
      Action:
        - "secretsmanager:GetSecretValue"
      Resource:
        - ${file(cloudformation/outputs.yml):Outputs.RDSSecretsArn.Value}
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource:
        - ${file(cloudformation/outputs.yml):Outputs.AlarmTopicArn.Value}
    - Effect: "Allow"        
      Action:
        - "ec2:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "CloudWatch:PutDashboard"
        - "CloudWatch:DeleteDashboards"
      Resource:
        - "*"
  vpc:
    securityGroupIds:
      - ${file(config/config.${self:provider.stage}.json):VPC_SECURITY_GROUP_ID}
    subnetIds:
      - ${file(config/config.${self:provider.stage}.json):VPC_SUBNET_ID_1}
      - ${file(config/config.${self:provider.stage}.json):VPC_SUBNET_ID_2}
      - ${file(config/config.${self:provider.stage}.json):VPC_SUBNET_ID_3}
  environment:
    region: ${self:provider.region}
    CURRENT_STAGE: ${self:provider.stage}
    alarmTopicArn: ${file(cloudformation/outputs.yml):Outputs.AlarmTopicArn.Value}
    RESEARCHER_INITIALIZATION_QUEUE_ARN: ${file(cloudformation/outputs.yml):Outputs.ResearcherInitializationQueueArn.Value}
    RESEARCHER_INITIALIZATION_QUEUE_URL: ${file(cloudformation/outputs.yml):Outputs.ResearcherInitializationQueueUrl.Value}
    PORTAL_TO_INSTANCE_TERMINATION_QUEUE_URL: ${file(cloudformation/outputs.yml):Outputs.PortalToInstanceTerminationQueueUrl.Value}
    PORTAL_TO_INSTANCE_TERMINATION_QUEUE_ARN: ${file(cloudformation/outputs.yml):Outputs.PortalToInstanceTerminationQueueArn.Value}


custom:
  vpcId: ${file(config/config.${self:provider.stage}.json):vpcId}
  webpackIncludeModules: true
  webpack:
    webpackConfig: ./webpack.config.js
    packager: 'npm'
  lambdaArnBase: "arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service.name}-${self:provider.stage}"
  authorizerPool:
    develop: arn:aws:cognito-idp:us-west-2:363527286999:userpool/us-west-2_TZpbYY6KB
    master: arn:aws:cognito-idp:us-west-2:065510690417:userpool/us-west-2_XA2P3XNm4

functions:
  getFromDatabase:
    handler: src/functions/getFromDatabase.handler
    timeout: 60
    events:
    - http:
        path: getFromDatabase
        method: get
        cors: true
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  getInstanceConfiguration:
    handler: src/functions/getInstanceConfigurations.handler
    timeout: 60
    events:
    - http:
        path: getInstanceConfigurations
        method: get
        cors: true
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  getUsers:
    handler: src/functions/getUsers.handler
    timeout: 60
    events:
    - http:
        path: getUsers
        method: get
        cors: true
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  getTeams:
    handler: src/functions/getTeams.handler
    timeout: 60
    events:
    - http:
        path: getTeams
        method: get
        cors: true
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  getAnnouncements:
    handler: src/functions/getAnnouncements.handler
    timeout: 60
    events:
    - http:
        path: getAnnouncements
        method: get
        cors: true
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  getAnnouncement:
    handler: src/functions/getAnnouncement.handler
    timeout: 60
    events:
    - http:
        path: getAnnouncement
        method: get
        cors: true
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  getEnvironments:
    handler: src/functions/getEnvironments.handler
    timeout: 60
    events:
    - http:
        path: getEnvironments
        method: get
        cors: true
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  getMessages:
    handler: src/functions/getMessages.handler
    timeout: 60
    events:
    - http:
        path: getMessages
        method: get
        cors: true
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  getConversations:
    handler: src/functions/getConversations.handler
    timeout: 60
    events:
    - http:
        path: getConversations
        method: get
        cors: true
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  getConversationById:
    handler: src/functions/getConversationById.handler
    timeout: 60
    events:
    - http:
        path: getConversationById
        method: post
        cors:
          origin: "*"
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
          allowCredentials: false
          cacheControl: "max-age=600, s-maxage=600, proxy-revalidate"
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  getMyMessages:
    handler: src/functions/getMyMessages.handler
    timeout: 60
    events:
    - http:
        path: getMyMessages
        method: post
        cors:
          origin: "*"
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
          allowCredentials: false
          cacheControl: "max-age=600, s-maxage=600, proxy-revalidate"
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  getMyEnvironments:
    handler: src/functions/getMyEnvironments.handler
    timeout: 60
    events:
    - http:
        path: getMyEnvironments
        method: post
        cors:
          origin: "*"
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
          allowCredentials: false
          cacheControl: "max-age=600, s-maxage=600, proxy-revalidate"
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  getRunningInstanceCount:
    handler: src/functions/getRunningInstanceCount.handler
    timeout: 60
    events:
    - http:
        path: getRunningInstanceCount
        method: post
        cors:
          origin: "*"
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
          allowCredentials: false
          cacheControl: "max-age=600, s-maxage=600, proxy-revalidate"
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  getMyUser:
    handler: src/functions/getMyUser.handler
    timeout: 60
    events:
    - http:
        path: getMyUser
        method: post
        cors:
          origin: "*"
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
          allowCredentials: false
          cacheControl: "max-age=600, s-maxage=600, proxy-revalidate"
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  createUser:
    handler: src/functions/createUser.handler
    timeout: 60
    events:
    - http:
        path: createUser
        method: post
        cors:
          origin: "*"
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
          allowCredentials: false
          cacheControl: "max-age=600, s-maxage=600, proxy-revalidate"
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  disableUser:
    handler: src/functions/disableUser.handler
    timeout: 60
    events:
    - http:
        path: disableUser
        method: put
        cors: true
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  createEnvironmentRecord:
    handler: src/functions/createEnvironmentRecord.handler
    timeout: 60
    events:
    - http:
        path: createEnvironmentRecord
        method: post
        cors:
          origin: "*"
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
          allowCredentials: false
          cacheControl: "max-age=600, s-maxage=600, proxy-revalidate"
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}

  createAnnouncement:
    handler: src/functions/createAnnouncement.handler
    timeout: 60
    events:
    - http:
        path: createAnnouncement
        method: post
        cors:
          origin: "*"
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
          allowCredentials: false
          cacheControl: "max-age=600, s-maxage=600, proxy-revalidate"
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  disableAnnouncement:
    handler: src/functions/disableAnnouncement.handler
    timeout: 60
    events:
    - http:
        path: disableAnnouncement
        method: put
        cors: true
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}  
  updateAnnouncement:
    handler: src/functions/updateAnnouncement.handler
    timeout: 60
    events:
    - http:
        path: updateAnnouncement
        method: put
        cors: true
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  createMessage:
    handler: src/functions/createMessage.handler
    timeout: 60
    events:
    - http:
        path: createMessage
        method: post
        cors:
          origin: "*"
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
          allowCredentials: false
          cacheControl: "max-age=600, s-maxage=600, proxy-revalidate"
        authorizer:
          name: authorizer
          arn: ${self:custom.authorizerPool.${self:provider.stage}}
  handleQueue:
    handler: src/functions/handleQueue.handler
    timeout: 30
    events:
      - sqs:
          arn: arn:aws:sqs:us-west-2:#{AWS::AccountId}:RafEC2Queue

#####################
### RAF FUNCTIONS ###
#####################

  createResearcherInstance:
    handler: src/functions/raf/createResearcherInstance.handler
    timeout: 60
    events:
      - sqs:  ${file(cloudformation/outputs.yml):Outputs.ResearcherInitializationQueue.Value}
  receiveStatusSignal:
    handler: src/functions/raf/receiveStatusSignal.handler
    timeout: 60
    events:
      - sqs:  ${file(cloudformation/outputs.yml):Outputs.InstanceStatusQueueArn.Value}      
  sendTerminationSignal:
    handler: src/functions/raf/sendTerminationSignal.handler
    timeout: 60
    events:
      - http:
          path: updateEnvironment
          method: put
          cors: true
          authorizer:
            name: authorizer
            arn: ${self:custom.authorizerPool.${self:provider.stage}}    

resources:
  - ${file(cloudformation/hosting.yml)}
  - ${file(cloudformation/resources.yml)}
  - ${file(cloudformation/aurora.yml)}
  - ${file(cloudformation/outputs.yml)}
