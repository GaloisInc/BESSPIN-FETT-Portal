service:
  name: fettportal
plugins:
  - serverless-pseudo-parameters
  - serverless-webpack
  - serverless-offline
package:
  individually: true
  exclude:
    - front-end/**
provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  stage: ${opt:stage, 'develop'}
  stackName: ${opt:stage}-${self:service.name}
  versionFunctions: false
  deploymentBucket: 
    name: ${file(config/config.${self:provider.stage}.json):deploymentBucket}
  tags:
    Project: FETT-Portal
    Environment: ${opt:stage}
    CreatedBy: Kurt Hopfer
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource: '*'
    - Effect: "Allow"
      Action:
        - "ssm:GetParametersByPath"
        - "ssm:GetParameter"
        - "ssm:PutParameter"
      Resource:
        - "arn:aws:ssm:us-west-2:#{AWS::AccountId}:parameter/fettportal/*"
        - "arn:aws:ssm:us-west-2:#{AWS::AccountId}:parameter/fettportal/*"
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource:
        - ${file(cloudformation/outputs.yml):Outputs.AlarmTopicArn.Value}
  vpc:
    securityGroupIds:
      - ${file(config/config.${self:provider.stage}.json):VPC_SECURITY_GROUP_ID}
    subnetIds:
      - ${file(config/config.${self:provider.stage}.json):VPC_SUBNET_ID_1}
      - ${file(config/config.${self:provider.stage}.json):VPC_SUBNET_ID_2}
      - ${file(config/config.${self:provider.stage}.json):VPC_SUBNET_ID_3}
  environment:
    region: ${self:provider.region}
    stage: ${self:provider.stage}
    alarmTopicArn: ${file(cloudformation/outputs.yml):Outputs.AlarmTopicArn.Value}

custom:
  vpcId: ${file(config/config.${self:provider.stage}.json):vpcId}
  webpackIncludeModules: true
  webpack:
    webpackConfig: ./webpack.config.js
    packager: 'npm'
  lambdaArnBase: "arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service.name}-${self:provider.stage}"

functions:
  getFromDatabase:
    handler: src/functions/getFromDatabase.handler
    timeout: 60
    events:
    - http:
        path: getFromDatabase
        method: get
        cors: true

resources:
  - ${file(cloudformation/hosting.yml)}
  - ${file(cloudformation/resources.yml)}
  - ${file(cloudformation/aurora.yml)}
  - ${file(cloudformation/outputs.yml)}



